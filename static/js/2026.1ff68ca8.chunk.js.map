{"version":3,"file":"static/js/2026.1ff68ca8.chunk.js","mappings":"kOACaA,EAAb,WACI,cAAc,eACVC,KAAKC,QAAS,EACdD,KAAKE,UAAY,IACjBF,KAAKG,QAAU,EAJvB,mCAMI,SAAKC,GACIA,SAGcC,IAAfD,EAAKE,QACLN,KAAKM,MAAQC,EAAAA,GAAAA,OAAoBP,KAAKM,MAAOF,EAAKE,aAElCD,IAAhBD,EAAKH,SACLD,KAAKC,OAASG,EAAKH,aAEAI,IAAnBD,EAAKF,YACLF,KAAKE,UAAYE,EAAKF,gBAELG,IAAjBD,EAAKD,UACLH,KAAKG,SAAUK,EAAAA,EAAAA,IAAcJ,EAAKD,eApB9C,KCAaM,EAAb,WACI,cAAc,eACVT,KAAKU,MAAQ,IAAIX,EACjBC,KAAKW,UAAY,IAAIZ,EAH7B,mCAKI,SAAKK,GACIA,IAGLJ,KAAKU,MAAME,KAAKR,EAAKM,OACrBV,KAAKW,UAAUC,KAAKR,EAAKO,gBAVjC,KCCaE,EAAb,qFACI,SAAeC,EAAUC,EAASC,EAAQb,GACtC,IAAmCc,EAAlBH,EAASI,QAAmCC,QAC7D,IAAKF,EACD,MAAO,GAEX,IAAME,EAAUF,EAAeN,UAAWS,EAAYD,EAAQlB,SAAUoB,EAAAA,EAAAA,MAAcF,EAAQjB,UAAWoB,EAAgBR,EAASI,QAAQK,OAAqBC,EAAiB,KAAH,IAAjB,EAA+BV,EAASW,aAAiBH,EAAcI,aAAaC,EAAmBP,GAAYQ,EAAAA,EAAAA,IAAcT,EAAQhB,SAAWqB,EAAiBrB,EAAS0B,GAAaC,EAAAA,EAAAA,IAAgBX,EAAQb,OAAQyB,EAAeF,GAAaG,EAAAA,EAAAA,IAAgBH,EAAYF,QAAoBtB,EAAW4B,EAAM,GAAIC,EAAed,GAAaW,EAGpf,OAFAE,EAAIE,KAAOD,EAAeH,OAAe1B,EACzC4B,EAAIG,OAASF,EAAeH,OAAe1B,EACpC4B,IATf,mDAWI,4FACUI,QAAQC,UADlB,2CAXJ,6EAcI,SAAUxB,GACN,IAAmCG,EAAlBH,EAASI,QAAmCC,QAC7D,QAAKF,GAGEA,EAAeN,UAAUV,SAnBxC,yBAqBI,SAAYiB,GACHA,EAAQC,UACTD,EAAQC,QAAU,IAAIV,GAFG,2BAAT8B,EAAS,iCAATA,EAAS,kBAI7B,cAAqBA,EAArB,eAA8B,CAAzB,IAAMC,EAAM,KACbtB,EAAQC,QAAQP,KAAhB,OAAqB4B,QAArB,IAAqBA,OAArB,EAAqBA,EAAQrB,YA1BzC,qDA6BI,4FACUkB,QAAQC,UADlB,2CA7BJ","sources":["../node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js","../node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js","../node_modules/@tsparticles/updater-twinkle/browser/TwinkleUpdater.js"],"sourcesContent":["import { OptionsColor, setRangeValue, } from \"@tsparticles/engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n","import { TwinkleValues } from \"./TwinkleValues.js\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n","import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle.js\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n"],"names":["TwinkleValues","this","enable","frequency","opacity","data","undefined","color","OptionsColor","setRangeValue","Twinkle","lines","particles","load","TwinkleUpdater","particle","context","radius","twinkleOptions","options","twinkle","twinkling","getRandom","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","getRangeValue","twinkleRgb","rangeColorToHsl","twinkleStyle","getStyleFromHsl","res","needsTwinkle","fill","stroke","Promise","resolve","sources","source"],"sourceRoot":""}
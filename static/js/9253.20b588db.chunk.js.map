{"version":3,"file":"static/js/9253.20b588db.chunk.js","mappings":"uOAEaA,EAAb,WACI,WAAYC,GAAW,2BACnBC,KAAKD,UAAYA,EACjBC,KAAKC,MAAQ,GACbD,KAAKE,UAAY,GACjBF,KAAKG,uBAAyB,GAC9BJ,EAAUK,YAAc,SAACC,GAAD,YAA6BC,IAAdD,IAA2BE,EAAAA,EAAAA,IAASF,GACrE,EAAKJ,MAAL,OAAWI,QAAX,IAAWA,EAAAA,EARJ,GASP,EAAKJ,MAAMO,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASL,MACxCN,EAAUY,YAAV,iCAAwB,WAAOC,EAASC,GAAhB,wFAA6B,EAAKF,YAAYC,EAASC,IAAvD,2CAAxB,wDATR,2EAWI,WAAkBD,EAASC,GAA3B,yFACuC,+BADvC,uBACYC,EADZ,EACYA,iBAA4DC,EAAW,IAAID,EAAiBd,KAAMA,KAAKD,UAAWa,EAASC,GACnIb,KAAKC,MAAMe,KAAKD,GAFpB,kBAGWA,GAHX,gDAXJ,2EAgBI,SAAKE,GAAS,gBACajB,KAAKC,OADlB,IACV,2BAAmC,SACtBiB,KAAKD,IAFR,iCAhBlB,6BAqBI,SAAgBE,GACZ,IAAMC,EAAkBpB,KAAKE,UAAWmB,EAAgBrB,KAAKG,uBAC7D,GAAa,aAATgB,EAAqB,CACrB,IAAMG,GAAuBC,EAAAA,EAAAA,IAAyBF,GAAgBG,EAAgB,OAAGF,QAAH,IAAGA,EAAAA,GAAwBC,EAAAA,EAAAA,IAAyBH,GAAkBK,EAAYzB,KAAKD,UAAU2B,cAAcC,MAAMC,cACtM5B,KAAKW,YAAYa,EAAkBC,MAzBpD,mDA4BI,4FACIzB,KAAKE,UAAYF,KAAKD,UAAU8B,cAAc3B,UAC9CF,KAAKG,uBAAyBH,KAAKD,UAAU8B,cAAcH,cAAcI,MAAM5B,UACzE6B,GAAWC,EAAAA,EAAAA,IAA0BhC,KAAKE,UAAN,iCAAiB,WAAOa,GAAP,+EACjD,EAAKJ,YAAYI,GADgC,2CAAjB,yDAGtCgB,aAAoBE,OAN5B,gCAOcC,QAAQC,IAAIJ,GAP1B,+CAUcA,EAVd,iDA5BJ,kFAyCI,SAAeK,GAAU,gBACEpC,KAAKC,OADP,IACrB,2BAAmC,CAE/B,GAF+B,QACtBoC,QAAQD,GACbA,EAASE,UACT,OAJa,iCAzC7B,4BAiDI,SAAevB,GACX,IAAMwB,EAAQvC,KAAKC,MAAMuC,QAAQzB,GAC7BwB,GApDS,GAqDTvC,KAAKC,MAAMwC,OAAOF,EAFoC,KAlDlE,oBAuDI,WAAS,gBACkBvC,KAAKC,OADvB,IACL,2BAAmC,SACtByC,UAFR,iCAvDb,kBA4DI,WACI1C,KAAKC,MAAQ,OA7DrB","sources":["../node_modules/@tsparticles/plugin-absorbers/browser/Absorbers.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"@tsparticles/engine\";\nconst defaultIndex = 0;\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const { AbsorberInstance } = await import(\"./AbsorberInstance.js\"), absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n"],"names":["Absorbers","container","this","array","absorbers","interactivityAbsorbers","getAbsorber","idxOrName","undefined","isNumber","find","t","name","addAbsorber","options","position","AbsorberInstance","absorber","push","context","draw","mode","absorberOptions","modeAbsorbers","absorbersModeOptions","itemFromSingleOrMultiple","absorbersOptions","aPosition","interactivity","mouse","clickPosition","actualOptions","modes","promises","executeOnSingleOrMultiple","Array","Promise","all","particle","attract","destroyed","index","indexOf","splice","resize"],"sourceRoot":""}
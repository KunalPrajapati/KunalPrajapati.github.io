{"version":3,"file":"static/js/7735.0220fa40.chunk.js","mappings":"iRAEMA,EAAU,IAAkBC,EAAH,EAAcC,KAAKC,GACrCC,EAAb,0CACI,WAAYC,EAAUC,EAAMC,EAAMC,GAAS,kCACjCH,EAAUC,EAAMC,EAAMC,GAFpC,oEAII,gHAJJ,kFAMI,WACU,IAcOC,EAAGC,EAAGC,EAdbL,EAAOM,KAAKN,KAAMC,EAAOK,KAAKL,KAAMF,EAAWO,KAAKP,SAckEQ,EAtB/C,GAsBwDP,EAAKQ,MAAXC,EAtBlD,GAsB2ET,EAAKU,OAAgBC,EAdzF,SAACR,EAAGC,GACpF,IAAMQ,GAAIC,EAAAA,EAAAA,MAAcnB,EAASW,EAAQT,KAAKkB,KAAMV,EAAID,EAAKP,KAAKmB,IAAIpB,EAAWiB,IAAKI,GAAIH,EAAAA,EAAAA,MAC1F,OAAIG,EAAItB,EACGW,EAEFW,EAAIC,GACFrB,KAAKC,GAAKQ,EAEZW,EAAIC,IACFrB,KAAKC,GAAKQ,GAGTA,EAE2Ka,CAAcX,EAAGE,GAAIU,GAA7Ld,EAAsNM,GAA5NR,EAAsNI,IAAnNH,EAAsNK,GAA/Lb,KAAKwB,KAAK,SAAChB,EAAIR,KAAKyB,IAAIhB,GAtBI,GAsBlB,SAAsCF,EAAIP,KAAK0B,IAAIjB,GAtBjC,KAsBoLkB,EAAetB,EAAOkB,EAAYvB,KAAKwB,MAAKP,EAAAA,EAAAA,OAAeM,EAClT,MAAO,CACHpB,SAAU,CACNI,EAAGJ,EAASI,EAAIoB,EAAe3B,KAAKyB,IAAIV,GACxCP,EAAGL,EAASK,EAAImB,EAAe3B,KAAK0B,IAAIX,SAzBxD,GAAyCa,EAAAA,kBCF5BC,EAAb,+EACI,SAAS1B,EAAUC,EAAMC,EAAMC,GAC3B,OAAO,IAAIJ,EAAoBC,EAAUC,EAAMC,EAAMC,OAF7D,M,8JCDasB,EAAb,WACI,WAAYzB,EAAUC,EAAMC,EAAMC,IAAS,eACvCI,KAAKP,SAAWA,EAChBO,KAAKN,KAAOA,EACZM,KAAKL,KAAOA,EACZK,KAAKJ,QAAUA,EALvB,qCAOI,SAAOH,EAAUC,GACbM,KAAKP,SAAWA,EAChBO,KAAKN,KAAOA,MATpB,KCAO,SAAe0B,EAAtB,kC,sCAAO,WAAkCC,GAAlC,8FAA0CC,IAA1C,iCACED,EAAOE,oBADT,gCAEgC,+BAFhC,gBAESC,EAFT,EAESA,aACRH,EAAOE,oBAAsB,IAAIC,EAAaH,GAH/C,cAKEA,EAAOI,2BACRJ,EAAOI,yBAA2B,SAACC,EAAMC,GAAc,MACnD,UAAAN,EAAOE,2BAAP,SAA4BK,kBAAkBF,EAAMC,KAPzD,UAU8B,wDAV9B,wBAUKE,EAVL,EAUKA,eAAwDC,EAAS,IAAID,EAAeR,GAVzF,UAWGA,EAAOU,UAAUD,EAAQR,GAX5B,4C","sources":["../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js","../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js","../node_modules/@tsparticles/plugin-emitters/browser/index.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        };\n    }\n}\n","import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n","export async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        const { ShapeManager } = await import(\"./ShapeManager.js\");\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const { EmittersPlugin } = await import(\"./EmittersPlugin.js\"), plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\nexport * from \"./EmitterContainer.js\";\nexport * from \"./EmitterShapeBase.js\";\nexport * from \"./EmittersEngine.js\";\nexport * from \"./IEmitterShape.js\";\nexport * from \"./IEmitterShapeGenerator.js\";\nexport * from \"./Enums/EmitterClickMode.js\";\nexport * from \"./IRandomPositionData.js\";\n"],"names":["quarter","doublePI","Math","PI","EmittersCircleShape","position","size","fill","options","x","y","theta","this","a","width","b","height","randomTheta","u","getRandom","atan","tan","v","double","generateTheta","maxRadius","sqrt","cos","sin","randomRadius","EmitterShapeBase","EmittersCircleShapeGenerator","loadEmittersPlugin","engine","refresh","emitterShapeManager","ShapeManager","addEmitterShapeGenerator","name","generator","addShapeGenerator","EmittersPlugin","plugin","addPlugin"],"sourceRoot":""}
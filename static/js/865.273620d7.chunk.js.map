{"version":3,"file":"static/js/865.273620d7.chunk.js","mappings":"+QAGA,SAASA,EAAuBC,EAAUC,GACtC,OAAOD,EAAWC,IAAUC,EAAAA,EAAAA,MAAcC,EAAAA,IAEvC,IAAMC,EAAb,0CACI,WAAYJ,EAAUK,EAAMC,EAAMC,GAAS,kCACjCP,EAAUK,EAAMC,EAAMC,GAFpC,oEAII,gHAJJ,kFAMI,WACI,IAAMD,EAAOE,KAAKF,KAAMN,EAAWQ,KAAKR,SAAUK,EAAOG,KAAKH,KAC9D,GAAIC,EACA,MAAO,CACHN,SAAU,CACNS,EAAGV,EAAuBC,EAASS,EAAGJ,EAAKK,OAC3CC,EAAGZ,EAAuBC,EAASW,EAAGN,EAAKO,UAKnD,IAAMC,EArBL,GAqBaR,EAAKK,MAAcI,EArBhC,GAqBwCT,EAAKO,OAAeG,EAAOC,KAAKC,MArB3D,GAqBiEf,EAAAA,EAAAA,OAAsBgB,EArB3E,IAqBgFhB,EAAAA,EAAAA,MAAcC,EAAAA,IACxH,OAAQY,GACJ,KAAK,EACD,MAAO,CACHf,SAAU,CACNS,EAAGT,EAASS,EAAIS,EAAIL,EACpBF,EAAGX,EAASW,EAAIG,IAG5B,KAAK,EACD,MAAO,CACHd,SAAU,CACNS,EAAGT,EAASS,EAAII,EAChBF,EAAGX,EAASW,EAAIO,EAAIJ,IAGhC,KAAK,EACD,MAAO,CACHd,SAAU,CACNS,EAAGT,EAASS,EAAIS,EAAIL,EACpBF,EAAGX,EAASW,EAAIG,IAI5B,QACI,MAAO,CACHd,SAAU,CACNS,EAAGT,EAASS,EAAII,EAChBF,EAAGX,EAASW,EAAIO,EAAIJ,SA7ChD,GAAyCK,EAAAA,kBCL5BC,EAAb,+EACI,SAASpB,EAAUK,EAAMC,EAAMC,GAC3B,OAAO,IAAIH,EAAoBJ,EAAUK,EAAMC,EAAMC,OAF7D,M,8JCDaY,EAAb,WACI,WAAYnB,EAAUK,EAAMC,EAAMC,IAAS,eACvCC,KAAKR,SAAWA,EAChBQ,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,EALvB,qCAOI,SAAOP,EAAUK,GACbG,KAAKR,SAAWA,EAChBQ,KAAKH,KAAOA,MATpB,KCAO,SAAegB,EAAtB,kC,sCAAO,WAAkCC,GAAlC,8FAA0CC,IAA1C,iCACED,EAAOE,oBADT,gCAEgC,+BAFhC,gBAESC,EAFT,EAESA,aACRH,EAAOE,oBAAsB,IAAIC,EAAaH,GAH/C,cAKEA,EAAOI,2BACRJ,EAAOI,yBAA2B,SAACC,EAAMC,GAAc,MACnD,UAAAN,EAAOE,2BAAP,SAA4BK,kBAAkBF,EAAMC,KAPzD,UAU8B,wDAV9B,wBAUKE,EAVL,EAUKA,eAAwDC,EAAS,IAAID,EAAeR,GAVzF,UAWGA,EAAOU,UAAUD,EAAQR,GAX5B,4C","sources":["../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js","../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js","../node_modules/@tsparticles/plugin-emitters/browser/index.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5, sides = 4, double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, position = this.position, size = this.size;\n        if (fill) {\n            return {\n                position: {\n                    x: randomSquareCoordinate(position.x, size.width),\n                    y: randomSquareCoordinate(position.y, size.height),\n                },\n            };\n        }\n        else {\n            const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - halfRandom) * double;\n            switch (side) {\n                case 0:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y - halfH,\n                        },\n                    };\n                case 1:\n                    return {\n                        position: {\n                            x: position.x - halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n                case 2:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y + halfH,\n                        },\n                    };\n                case 3:\n                default:\n                    return {\n                        position: {\n                            x: position.x + halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n            }\n        }\n    }\n}\n","import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n","export async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        const { ShapeManager } = await import(\"./ShapeManager.js\");\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const { EmittersPlugin } = await import(\"./EmittersPlugin.js\"), plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\nexport * from \"./EmitterContainer.js\";\nexport * from \"./EmitterShapeBase.js\";\nexport * from \"./EmittersEngine.js\";\nexport * from \"./IEmitterShape.js\";\nexport * from \"./IEmitterShapeGenerator.js\";\nexport * from \"./Enums/EmitterClickMode.js\";\nexport * from \"./IRandomPositionData.js\";\n"],"names":["randomSquareCoordinate","position","offset","getRandom","halfRandom","EmittersSquareShape","size","fill","options","this","x","width","y","height","halfW","halfH","side","Math","floor","v","EmitterShapeBase","EmittersSquareShapeGenerator","loadEmittersPlugin","engine","refresh","emitterShapeManager","ShapeManager","addEmitterShapeGenerator","name","generator","addShapeGenerator","EmittersPlugin","plugin","addPlugin"],"sourceRoot":""}
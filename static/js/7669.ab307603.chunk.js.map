{"version":3,"file":"static/js/7669.ab307603.chunk.js","mappings":"uPAIA,SAASA,EAAyBC,EAAkBC,GAC5CD,EAAiBC,MACjBD,EAAiBC,MAAMC,MAAQD,EAG/BD,EAAiBC,MAAQ,CACrBC,MAAOD,GAIZ,IAAME,EAAb,WACI,WAAYC,EAAQC,EAAUC,EAAWC,EAASC,GAAU,6CACxDC,KAAKJ,SAAWA,EAChBI,KAAKH,UAAYA,EACjBG,KAAKC,SAAW,WAAM,QAClB,YAAKC,yBAAL,SAAwBC,aACxB,EAAKD,uBAAoBE,EACzB,YAAKC,uBAAL,SAAsBF,aACtB,EAAKE,qBAAkBD,EACvB,EAAKR,SAASU,cAAc,GAC5B,EAAKC,QAAQC,cAAc,mBAAoB,CAC3CX,UAAW,EAAKA,UAChBY,KAAM,CACFC,QAAS,MAIrBV,KAAKW,cAAgB,WAAM,MACvB,IAAI,EAAKC,QAAT,CAGA,IAAMC,OAA2CT,KAAhC,YAAKN,QAAQgB,YAAb,eAAmBD,WAAyBE,EAAAA,EAAAA,IAAc,EAAKjB,QAAQgB,KAAKD,eAAYT,EACrG,EAAKP,UAAUmB,OAAOC,eACrB,EAAKC,WAF0I,GAE7G,EAAKC,iBAC3Bf,IAAbS,GACAA,EAJ8H,IAK9H,EAAKO,UAAYP,EAAWQ,EAAAA,MAGpCrB,KAAKsB,mBAAqB,SAACC,EAAWC,EAAWC,GAAmD,MAAzCC,EAAyC,uDAxCgD,EAyC1I7B,EAAY,EAAKA,UACvB,IAAK0B,EAAUI,OACX,OAAOH,EAEX,IAAMI,GAAcC,EAAAA,EAAAA,IAAcN,EAAUO,QAASC,GAAQhB,EAAAA,EAAAA,IAAc,EAAKjB,QAAQkC,KAAKD,OAAQE,EAAcF,EAAQV,EAAAA,GAAyBxB,EAAUmB,OAAOC,aAAciB,EAAoB,EAAGC,GAAapB,EAAAA,EAAAA,IAAa,UAACQ,EAAUa,aAAX,QAAoBF,GACxP,OAAQV,EAAaW,EAAatC,EAAUwC,SAAYJ,EAAaL,EAAcF,GAAUD,GAEjGzB,KAAKO,QAAUZ,EACfK,KAAKsC,iBAAmB,EACxBtC,KAAKuC,kBAAoB,EACzBvC,KAAKwC,mBAAqB,EAC1BxC,KAAKyC,iBAAmB1C,EACpBD,aAAmB4C,EAAAA,QACnB1C,KAAKF,QAAUA,GAGfE,KAAKF,QAAU,IAAI4C,EAAAA,QACnB1C,KAAKF,QAAQ6C,KAAK7C,IAEtBE,KAAK4C,aACA7B,EAAAA,EAAAA,IAAa,UAACf,KAAKF,QAAQgB,KAAKiB,aAAnB,QA7DW,GA6DqCV,EAAAA,GAC1DrB,KAAKH,UAAUmB,OAAOC,aAC9BjB,KAAKD,SAAL,UAAgBC,KAAKyC,wBAArB,QAAyCzC,KAAK6C,gBAC9C7C,KAAK8C,KAAO9C,KAAKF,QAAQgD,KACzB9C,KAAK+C,KAAO/C,KAAKF,QAAQiD,KACzB/C,KAAKgD,aAAehD,KAAKF,QAAQgB,KAAKmC,KACtCjD,KAAKkD,sBAAuB,EAC5B,IAAI3D,GAAmB4D,EAAAA,EAAAA,IAAW,GAAInD,KAAKF,QAAQsD,WAanD,GAZgB,QAAhB,EAAA7D,SAAA,QAAAA,EAAqB,IACrB,aAAAA,GAAiB8D,YAAjB,UAAiBA,KAAS,IAC1B,aAAA9D,EAAiB8D,MAAKC,iBAAtB,UAAsBA,UAActD,KAAKF,QAAQwD,WAC7CtD,KAAKF,QAAQyD,aACbvD,KAAKuD,YAAaC,EAAAA,EAAAA,IAAgBxD,KAAKF,QAAQyD,aAEnDvD,KAAKY,SAAWZ,KAAKF,QAAQ2D,SAC7BzD,KAAK0D,kBAAoBnE,EACzBS,KAAK2D,MAAQ3D,KAAK4D,YAClB5D,KAAK6D,MAAOC,EAAAA,EAAAA,IAAQ9D,KAAK2D,MAAO3D,KAAKH,UAAUkE,OAAOF,MACtD7D,KAAKkB,WAAL,UAAkBlB,KAAKF,QAAQgB,KAAKkD,aAApC,SA/EkH,EAgFlHhE,KAAKmB,UAAYnB,KAAKkB,YAhFyB,EAiF3ClB,KAAKF,QAAQmE,MAAO,CACpB,IAAMC,EAAUC,SAASC,eAAepE,KAAKF,QAAQmE,OACjDC,IACAlE,KAAKE,kBAAoB,IAAImE,kBAAiB,WAC1C,EAAKC,YAETtE,KAAKK,gBAAkB,IAAIkE,gBAAe,WACtC,EAAKD,YAETtE,KAAKE,kBAAkBsE,QAAQN,EAAS,CACpCO,YAAY,EACZC,gBAAiB,CAAC,QAAS,QAAS,YAExC1E,KAAKK,gBAAgBmE,QAAQN,IAGrC,IAAMS,EAAe3E,KAAKF,QAAQ8E,MAAOC,EAAc,UAAG7E,KAAKO,QAAQuE,2BAAhB,aAAG,EAAkCC,kBAAkBJ,EAAaK,MACvHH,IACA7E,KAAKiF,OAASJ,EAAeK,SAASlF,KAAKD,SAAUC,KAAK6D,KAAM7D,KAAK+C,KAAM4B,EAAa7E,UAE5FE,KAAKO,QAAQC,cAAc,iBAAkB,CACzCX,UAAAA,EACAY,KAAM,CACFC,QAASV,QAGjBA,KAAKmF,OAhGb,4CAkGI,WACInF,KAAKY,SAAU,EACfZ,KAAKoF,UApGb,0BAsGI,WACIpF,KAAKY,SAAU,EACfZ,KAAKmF,SAxGb,mDA0GI,4GACUnF,KAAKiF,cADf,aACU,EAAaI,OADvB,gDA1GJ,yEA6GI,WACQrF,KAAKY,gBAGFZ,KAAKsF,aAjHpB,kBAmHI,WAAO,MACH,IAAItF,KAAKY,SAGHZ,KAAKH,UAAUmB,OAAOC,eACvBjB,KAAKkB,WAnIqC,GAmIRlB,KAAKmB,YAAcnB,KAAKF,QAAQgB,KAAKkD,SACvEhE,KAAKgD,aAAehD,KAAKwC,qBAAL,UAA4BxC,KAAK4C,mBAAjC,QApI6C,IAkItE,CAKA,QAAwBxC,IAApBJ,KAAKsF,WAA0B,CAC/B,IAAMvD,GAAQhB,EAAAA,EAAAA,IAAcf,KAAKF,QAAQkC,KAAKD,OAC9C/B,KAAKsF,WAAcvD,EAAQV,EAAAA,GAAyBrB,KAAKH,UAAUmB,OAAOC,cAE1EjB,KAAKkB,WA3IsC,GA2ITlB,KAAKmB,YACvCnB,KAAKW,mBAjIjB,oBAoII,WAAS,MACC4E,EAAkBvF,KAAKyC,iBAC7BzC,KAAKD,SACDwF,IAAmBC,EAAAA,EAAAA,IAAcD,EAAiBvF,KAAKH,UAAUkE,OAAOF,KAAM4B,EAAAA,GAAAA,QACxEF,EACAvF,KAAK6C,gBACf7C,KAAK2D,MAAQ3D,KAAK4D,YAClB5D,KAAK6D,MAAOC,EAAAA,EAAAA,IAAQ9D,KAAK2D,MAAO3D,KAAKH,UAAUkE,OAAOF,MACtD,UAAA7D,KAAKiF,cAAL,SAAaX,OAAOtE,KAAKD,SAAUC,KAAK6D,QA5IhD,oBA8II,SAAO6B,GACH,IAAI1F,KAAKY,QAAT,CAGsB,QAAtB,GAAIZ,KAAKgD,YACLhD,KAAKgD,aAAc,EACnBhD,KAAKwC,mBAAL,UAA0BxC,KAAK4C,mBAA/B,QA/JkE,EAgKlE5C,KAAKuC,kBAAL,UAAyBvC,KAAKsF,kBAA9B,QAhKwF,EAsK5F,GAJKtF,KAAKkD,uBACNlD,KAAKkD,sBAAuB,EAC5BlD,KAAK2F,eAAe3F,KAAKF,QAAQ8F,kBAEdxF,IAAnBJ,KAAKoB,YACLpB,KAAKsC,kBAAoBoD,EAAMjG,MAC3BO,KAAKsC,kBAAoBtC,KAAKoB,WAAW,CAQa,QAAtD,GAPApB,KAAKoF,aACoBhF,IAArBJ,KAAK4C,oBACE5C,KAAK4C,YAEX5C,KAAKmB,WACNnB,KAAKkB,aAELlB,KAAKkB,WAhL8B,GAgLDlB,KAAKmB,UACvCnB,KAAKD,SAAWC,KAAK6C,gBACrB,UAAA7C,KAAKiF,cAAL,SAAaX,OAAOtE,KAAKD,SAAUC,KAAK6D,MACxC7D,KAAK4C,aACA7B,EAAAA,EAAAA,IAAa,UAACf,KAAKF,QAAQgB,KAAKiB,aAAnB,QApLD,GAoLiDV,EAAAA,GAC1DrB,KAAKH,UAAUmB,OAAOC,kBAG9BjB,KAAKC,WAETD,KAAKsC,kBAAoBtC,KAAKoB,iBACvBpB,KAAKoB,eAGKhB,IAArBJ,KAAK4C,cACL5C,KAAKwC,oBAAsBkD,EAAMjG,MAC7BO,KAAKwC,oBAAsBxC,KAAK4C,cAChC5C,KAAKO,QAAQC,cAAc,cAAe,CACtCX,UAAWG,KAAKH,YAEpBG,KAAKmF,OACLnF,KAAKwC,oBAAsBxC,KAAKwC,0BACzBxC,KAAK4C,mBAGIxC,IAApBJ,KAAKsF,aACLtF,KAAKuC,mBAAqBmD,EAAMjG,MAC5BO,KAAKuC,mBAAqBvC,KAAKsF,aAC/BtF,KAAK6F,QACL7F,KAAKuC,mBAAqBvC,KAAKsF,gBAlM/C,2BAsMI,WACI,GAAItF,KAAKF,QAAQmE,MAAO,CACpB,IAAMC,EAAUC,SAASC,eAAepE,KAAKF,QAAQmE,OACrD,GAAIC,EAAS,CACT,IAAM4B,EAAS5B,EAAQ6B,wBAAyBC,EAAUhG,KAAKH,UAAUmB,OAAOiF,WAChF,MAAO,CACHC,GAAIJ,EAAOI,EAvNlB,GAuNsBJ,EAAOK,OAAgBH,EACtCI,GAAIN,EAAOM,EAxNlB,GAwNsBN,EAAOO,QAAiBL,IAInD,OAAOM,EAAAA,EAAAA,IAAmC,CACtCzC,KAAM7D,KAAKH,UAAUkE,OAAOF,KAC5B9D,SAAUC,KAAKF,QAAQC,aAnNnC,uBAsNI,WAAY,MACFF,EAAYG,KAAKH,UACvB,GAAIG,KAAKF,QAAQmE,MAAO,CACpB,IAAMC,EAAUC,SAASC,eAAepE,KAAKF,QAAQmE,OACrD,GAAIC,EAAS,CACT,IAAM4B,EAAS5B,EAAQ6B,wBACvB,MAAO,CACHI,MAAOL,EAAOK,MAAQtG,EAAUmB,OAAOiF,WACvCI,OAAQP,EAAOO,OAASxG,EAAUmB,OAAOiF,WACzCM,KAAM,YAIlB,iBAAQvG,KAAKF,QAAQ+D,YAArB,QACK,WACG,IAAMA,EAAO,IAAI2C,EAAAA,EAMjB,OALA3C,EAAKlB,KAAK,CACN0D,OAAQ,EACRE,KAAM,UACNJ,MAAO,IAEJtC,EAPV,KApOb,mBA8OI,WACI,IAAI7D,KAAKY,QAAT,CAGA,IAAM6F,GAAW1F,EAAAA,EAAAA,IAAcf,KAAKF,QAAQkC,KAAKyE,UACjDzG,KAAK2F,eAAec,MAnP5B,4BAqPI,SAAeA,GAEX,IADA,IAAMC,GAAyBC,EAAAA,EAAAA,IAAyB3G,KAAK0D,mBACpDkD,EAAI,EAAGA,EAAIH,EAAUG,IAAK,CAC/B,IAAMrH,GAAmB4D,EAAAA,EAAAA,IAAW,GAAIuD,GACxC,GAAI1G,KAAKuD,WAAY,OACXsD,EAAY,UAAG7G,KAAKF,QAAQyD,kBAAhB,aAAG,EAAyBhC,UAC9C,GAAIsF,EAAc,CACd,IAAMC,EAAY,CACdC,EAAG,IACHC,EAAG,IACHC,EAAG,KAEPjH,KAAKuD,WAAWwD,EAAI/G,KAAKsB,mBAAmBuF,EAAaE,EAAG/G,KAAKuD,WAAWwD,EAAGD,EAAUC,EADxE,KAEjB/G,KAAKuD,WAAWyD,EAAIhH,KAAKsB,mBAAmBuF,EAAaG,EAAGhH,KAAKuD,WAAWyD,EAAGF,EAAUE,GACzFhH,KAAKuD,WAAW0D,EAAIjH,KAAKsB,mBAAmBuF,EAAaI,EAAGjH,KAAKuD,WAAW0D,EAAGH,EAAUG,GAE7F3H,EAAyBC,EAAkBS,KAAKuD,YAEpD,IAAMoB,EAAe3E,KAAKF,QAAQ8E,MAC9B7E,EAAWC,KAAKD,SACpB,GAAIC,KAAKiF,OAAQ,CACb,IAAMiC,EAAelH,KAAKiF,OAAOkC,iBACjC,GAAID,EAAc,CACdnH,EAAWmH,EAAanH,SACxB,IAAMqH,EAAczC,EAAa0C,QAC7BD,EAAY5H,OAAS0H,EAAa1H,OAClCF,EAAyBC,EAAkB2H,EAAa1H,OAExD4H,EAAYE,UACR/H,EAAiB+H,QACjB/H,EAAiB+H,QAAQ7H,MAAQyH,EAAaI,QAG9C/H,EAAiB+H,QAAU,CACvB7H,MAAOyH,EAAaI,eAMhCvH,EAAW,KAGfA,GACAC,KAAKH,UAAUuD,UAAUmE,YAAYxH,EAAUR,QAjS/D","sources":["../node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: \"precise\",\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: \"percent\",\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this._emitParticles(quantity);\n    }\n    _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n"],"names":["setParticlesOptionsColor","particlesOptions","color","value","EmitterInstance","engine","emitters","container","options","position","this","_destroy","_mutationObserver","disconnect","undefined","_resizeObserver","removeEmitter","_engine","dispatchEvent","data","emitter","_prepareToDie","_paused","duration","life","getRangeValue","retina","reduceFactor","_lifeCount","_immortal","_duration","millisecondsToSeconds","_setColorAnimation","animation","initValue","maxValue","factor","enable","colorOffset","randomInRange","offset","delay","rate","emitFactor","defaultColorSpeed","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","Emitter","load","_spawnDelay","_calcPosition","name","fill","_firstSpawn","wait","_startParticlesAdded","deepExtend","particles","move","direction","spawnColor","rangeColorToHsl","autoPlay","_particlesOptions","_size","_calcSize","size","getSize","canvas","count","domId","element","document","getElementById","MutationObserver","resize","ResizeObserver","observe","attributes","attributeFilter","shapeOptions","shape","shapeGenerator","emitterShapeManager","getShapeGenerator","type","_shape","generate","play","pause","init","_emitDelay","initialPosition","isPointInside","Vector","delta","_emitParticles","startCount","_emit","elRect","getBoundingClientRect","pxRatio","pixelRatio","x","width","y","height","calcPositionOrRandomFromSizeRanged","mode","EmitterSize","quantity","singleParticlesOptions","itemFromSingleOrMultiple","i","hslAnimation","maxValues","h","s","l","shapePosData","randomPosition","replaceData","replace","opacity","addParticle"],"sourceRoot":""}
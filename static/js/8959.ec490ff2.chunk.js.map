{"version":3,"file":"static/js/8959.ec490ff2.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, origin = {\n    x: 0,\n    y: 0,\n}, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"names":["origin","maxAngle","Math","PI","AbsorberInstance","absorbers","container","options","position","this","_calcPosition","exactPosition","calcPositionOrRandomFromSizeRanged","size","canvas","Vector","x","y","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","calcPositionOrRandomFromSize","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","length","getDistance","getPosition","angle","getRandom","destroy","minSize","min","width","height","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","percentDenominator","reduceFactor","addV","addTo","initialPosition","Absorber","load","dragging","name","opacity","getRangeValue","value","mass","density","limit","radius","color","rangeColorToRgb","b","g","r","copy","draggable","mouse","interactivity","clicking","downPosition","pos","getDistances","dx","dy","distance","pow","getRadius","sizeFactor","context","translate","beginPath","arc","closePath","fillStyle","getStyleFromRgb","fill","isPointInside"],"sourceRoot":""}
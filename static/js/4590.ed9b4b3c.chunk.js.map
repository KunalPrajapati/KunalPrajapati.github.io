{"version":3,"file":"static/js/4590.ed9b4b3c.chunk.js","mappings":"sOACaA,EAAb,WACI,WAAYC,EAAQC,GAAW,2BAC3BC,KAAKD,UAAYA,EACjBC,KAAKC,QAAUH,EACfE,KAAKE,MAAQ,GACbF,KAAKG,SAAW,GAChBH,KAAKI,sBAAwB,CACzBC,OAAQ,CACJC,MAAO,EACPC,QAAQ,GAEZC,MAAO,IAGXT,EAAUU,WAAa,SAACC,GAAD,YAA6BC,IAAdD,IAA2BE,EAAAA,EAAAA,IAASF,GACpE,EAAKR,MAAL,OAAWQ,QAAX,IAAWA,EAAAA,EAFI,GAGf,EAAKR,MAAMW,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASL,MACxCX,EAAUiB,WAAV,iCAAuB,WAAOC,EAASC,GAAhB,wFAA6B,EAAKF,WAAWC,EAASC,IAAtD,2CAAvB,wDACAnB,EAAUoB,cAAgB,SAACT,GACvB,IAAMU,EAAUrB,EAAUU,WAAWC,GACjCU,GACA,EAAKD,cAAcC,IAG3BrB,EAAUsB,YAAc,SAACX,GACrB,IAAMU,EAAUrB,EAAUU,WAAWC,GACjCU,GACAA,EAAQE,gBAGhBvB,EAAUwB,aAAe,SAACb,GACtB,IAAMU,EAAUrB,EAAUU,WAAWC,GACjCU,GACAA,EAAQI,iBAjCxB,0EAqCI,WAAiBP,EAASC,GAA1B,+FAC8B,uCAD9B,uBACYO,EADZ,EACYA,QADZ,SACkG,+BADlG,uBACwEC,EADxE,EACwEA,iBAA0DC,EAAiB,IAAIF,GACpIG,KAAKX,GACdG,EAAU,IAAIM,EAAgB1B,KAAKC,QAASD,KAAMA,KAAKD,UAAW4B,EAAgBT,GAH5F,UAIUE,EAAQS,OAJlB,eAKI7B,KAAKE,MAAM4B,KAAKV,GALpB,kBAMWA,GANX,iDArCJ,sFA6CI,SAAgBW,GAAM,aACZJ,EAAiB3B,KAAKG,SAAU6B,EAAehC,KAAKI,sBAC1D,GAAa,YAAT2B,EAAJ,CAGA,IAAIE,EACJ,GAAID,IAAgBE,EAAAA,EAAAA,IAAQF,EAAaxB,OAAQ,CAE7C,GAAIwB,EAAaxB,MAAM2B,OADL,GAC2BH,EAAa3B,OAAOE,OAAQ,CACrE0B,EAAsB,GAEtB,IADA,IAAMG,EAAc,GACXC,EAAI,EAAGA,EAAIL,EAAa3B,OAAOC,MAAO+B,IAAK,CAChD,IAAMC,GAAMC,EAAAA,EAAAA,IAAiBP,EAAaxB,OACtC4B,EAAYI,SAASF,IAAQF,EAAYD,OAASH,EAAaxB,MAAM2B,OACrEE,KAGJD,EAAYN,KAAKQ,GACjBL,EAAoBH,MAAKW,EAAAA,EAAAA,IAAcT,EAAaxB,MAAO8B,WAI/DL,EAAsBD,EAAaxB,WAIvCyB,EAAmB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAcxB,MAExC,IAAMkC,EAAe,UAAGT,SAAH,QAA0BN,EAAgBgB,EAAY3C,KAAKD,UAAU6C,cAAcC,MAAMC,eACzGC,EAAAA,EAAAA,IAA0BL,EAAD,iCAAkB,WAAOtB,GAAP,+EACtC,EAAKJ,WAAWI,EAASuB,GADa,2CAAlB,0DA1EtC,mDA8EI,yFACI3C,KAAKG,SAAWH,KAAKD,UAAUiD,cAAc7C,SAC7CH,KAAKI,sBAAwBJ,KAAKD,UAAUiD,cAAcJ,cAAcK,MAAM9C,SACzEH,KAAKG,SAHd,sDAMQ+B,EAAAA,EAAAA,IAAQlC,KAAKG,UANrB,2BAOqCH,KAAKG,UAP1C,gEAOmBwB,EAPnB,kBAQkB3B,KAAKgB,WAAWW,GARlC,wLAYc3B,KAAKgB,WAAWhB,KAAKG,UAZnC,gEA9EJ,yEA6FI,WAAQ,gBACkBH,KAAKE,OADvB,IACJ,2BAAkC,SACtBgD,SAFR,iCA7FZ,kBAkGI,WAAO,gBACmBlD,KAAKE,OADxB,IACH,2BAAkC,SACtBiD,QAFT,iCAlGX,2BAuGI,SAAc/B,GACV,IAAMgC,EAAQpD,KAAKE,MAAMmD,QAAQjC,GAC7BgC,GADkD,GAElDpD,KAAKE,MAAMoD,OAAOF,EAFiD,KAxG/E,oBA6GI,WAAS,gBACiBpD,KAAKE,OADtB,IACL,2BAAkC,SACtBqD,UAFP,iCA7Gb,kBAkHI,WACIvD,KAAKE,MAAQ,KAnHrB,oBAqHI,SAAOsD,GAAO,gBACYxD,KAAKE,OADjB,IACV,2BAAkC,SACtBuD,OAAOD,IAFT,mCArHlB","sources":["../node_modules/@tsparticles/plugin-emitters/browser/Emitters.js"],"sourcesContent":["import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"@tsparticles/engine\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        const defaultIndex = 0;\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = async (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    async addEmitter(options, position) {\n        const { Emitter } = await import(\"./Options/Classes/Emitter.js\"), { EmitterInstance } = await import(\"./EmitterInstance.js\"), emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        await emitter.init();\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            const minLength = 0;\n            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        void executeOnSingleOrMultiple(emittersOptions, async (emitter) => {\n            await this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                await this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            await this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;\n        if (index >= minIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n"],"names":["Emitters","engine","container","this","_engine","array","emitters","interactivityEmitters","random","count","enable","value","getEmitter","idxOrName","undefined","isNumber","find","t","name","addEmitter","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","Emitter","EmitterInstance","emitterOptions","load","init","push","mode","modeEmitters","emittersModeOptions","isArray","length","usedIndexes","i","idx","arrayRandomIndex","includes","itemFromArray","emittersOptions","ePosition","interactivity","mouse","clickPosition","executeOnSingleOrMultiple","actualOptions","modes","pause","play","index","indexOf","splice","resize","delta","update"],"sourceRoot":""}
{"version":3,"file":"static/js/9003.566aaefb.chunk.js","mappings":"6MACaA,EAAb,WACI,cAAc,eACVC,KAAKC,MAAQ,GACbD,KAAKE,KAAO,GAHpB,mCAKI,SAAKC,GACIA,SAGcC,IAAfD,EAAKF,QACLD,KAAKC,OAAQI,EAAAA,EAAAA,IAAcF,EAAKF,aAElBG,IAAdD,EAAKD,OACLF,KAAKE,MAAOG,EAAAA,EAAAA,IAAcF,EAAKD,YAb3C,KCCaI,EAAb,WACI,cAAc,eACVN,KAAKO,SAAW,EAChBP,KAAKQ,QAAS,EACdR,KAAKS,MAAQ,IAAIV,EAJzB,mCAMI,SAAKI,GACD,GAAKA,SAGiBC,IAAlBD,EAAKI,WACLP,KAAKO,UAAWF,EAAAA,EAAAA,IAAcF,EAAKI,gBAEnBH,IAAhBD,EAAKK,SACLR,KAAKQ,OAASL,EAAKK,aAEJJ,IAAfD,EAAKM,OACL,IAAIC,EAAAA,EAAAA,IAASP,EAAKM,OACdT,KAAKS,MAAME,KAAK,CAAEV,MAAOE,EAAKM,YAE7B,CACD,IAAMG,EAAaT,EAAKM,WACDL,IAAnBQ,EAAWC,IACXb,KAAKS,MAAME,KAAK,CAAEV,MAAOW,IAGzBZ,KAAKS,MAAME,KAAKR,EAAKM,YA1BzC,KCDuCK,EAAH,EAAcC,KAAKC,GCEvD,IAAkBF,EAAH,EAAcC,KAAKC,GACrBC,EAAb,WACI,WAAYC,IAAW,eACnBlB,KAAKkB,UAAYA,EAFzB,mCAII,SAAKC,GAAU,MACLC,EAAYD,EAASE,QAAQC,OACnC,OAAIF,QAAJ,IAAIA,GAAAA,EAAWZ,OACXW,EAASG,OAAS,CACdrB,OAAOsB,EAAAA,EAAAA,MAAcT,EACrBU,YAAYC,EAAAA,EAAAA,IAAcL,EAAUX,MAAMR,OAVA,IAW1CyB,WAAWD,EAAAA,EAAAA,IAAcL,EAAUX,MAAMP,MAXwB,IAerEiB,EAASG,OAAS,CACdrB,MAAO,EACPuB,WAAY,EACZE,UAAW,GAGnBP,EAASQ,OAAOC,gBACZH,EAAAA,EAAAA,IAAa,iBAACL,QAAD,IAACA,OAAD,EAACA,EAAWb,gBAAZ,QAtB8E,GAsBnCP,KAAKkB,UAAUS,OAAOE,aArB1F,uBAuBI,SAAUV,GAAU,MAChB,OAAQA,EAASW,YAAcX,EAASY,YAAa,UAACZ,EAASE,QAAQC,cAAlB,QAAC,EAAyBd,UAxBvF,yBA0BI,SAAYa,GACHA,EAAQC,SACTD,EAAQC,OAAS,IAAIhB,GAFI,2BAAT0B,EAAS,iCAATA,EAAS,kBAI7B,cAAqBA,EAArB,eAA8B,CAAzB,IAAMC,EAAM,KACbZ,EAAQC,OAAOX,KAAf,OAAoBsB,QAApB,IAAoBA,OAApB,EAAoBA,EAAQX,WA/BxC,oBAkCI,SAAOH,EAAUe,GACRlC,KAAKmC,UAAUhB,IDrCrB,SAAsBA,EAAUe,GAAO,MAC1BE,EAAkBjB,EAASE,QAAnCC,OAA8CA,EAAWH,EAAXG,OACtD,GAAI,OAACc,QAAD,IAACA,GAAAA,EAAe5B,QAAWc,EAA/B,CAGM,IAAAE,EAAaF,EAAOE,WAAaU,EAAMG,OAAqD9B,EAAjCe,EAAOI,UAAYQ,EAAMG,SAAiC,UAAClB,EAASQ,OAAOC,sBAAjB,QANvG,GAM6JM,EAAMG,SAClLC,EAAAA,GAP4E,IAOnCC,EAAMzB,EAAY0B,EAAarB,EAAbqB,SAChElB,EAAOrB,OAASuB,EACZF,EAAOrB,MAAQsC,IACfjB,EAAOrB,OAASsC,GAEpBC,EAASC,GAAKlC,EAAWQ,KAAK2B,IAAIpB,EAAOrB,OACzCuC,EAASG,GAAKpC,EAAWQ,KAAK6B,IAAI7B,KAAK8B,IAAIvB,EAAOrB,SC4B9C6C,CAAa3B,EAAUe,OAtC/B","sources":["../node_modules/@tsparticles/updater-wobble/browser/Options/Classes/WobbleSpeed.js","../node_modules/@tsparticles/updater-wobble/browser/Options/Classes/Wobble.js","../node_modules/@tsparticles/updater-wobble/browser/Utils.js","../node_modules/@tsparticles/updater-wobble/browser/WobbleUpdater.js"],"sourcesContent":["import { setRangeValue } from \"@tsparticles/engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n","import { isNumber, setRangeValue, } from \"@tsparticles/engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed.js\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n","import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst defaultDistance = 0, double = 2, doublePI = Math.PI * double, distanceFactor = 60;\nexport function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? defaultDistance) * delta.factor)) /\n        (millisecondsToSeconds / distanceFactor), max = doublePI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n","import { getRandom, getRangeValue, } from \"@tsparticles/engine\";\nimport { Wobble } from \"./Options/Classes/Wobble.js\";\nimport { updateWobble } from \"./Utils.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360, moveSpeedFactor = 10, defaultDistance = 0;\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * doublePI,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / maxAngle,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / moveSpeedFactor,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance =\n            getRangeValue(wobbleOpt?.distance ?? defaultDistance) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n"],"names":["WobbleSpeed","this","angle","move","data","undefined","setRangeValue","Wobble","distance","enable","speed","isNumber","load","rangeSpeed","min","doublePI","Math","PI","WobbleUpdater","container","particle","wobbleOpt","options","wobble","getRandom","angleSpeed","getRangeValue","moveSpeed","retina","wobbleDistance","pixelRatio","destroyed","spawning","sources","source","delta","isEnabled","wobbleOptions","factor","millisecondsToSeconds","max","position","x","cos","y","abs","sin","updateWobble"],"sourceRoot":""}
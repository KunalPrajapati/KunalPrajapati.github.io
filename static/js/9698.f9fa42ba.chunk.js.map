{"version":3,"file":"static/js/9698.f9fa42ba.chunk.js","mappings":"8PA0BA,SAASA,EAASC,EAASC,EAAMC,EAAQC,EAASC,EAAOC,GACrD,IAA6CC,EAAM,CAC/CC,IADYN,EAAKO,OAASN,EA1BT,IA4BjBO,EA5BiB,GA4BdP,GACJQ,EA7BQ,EA6BGR,EACVG,EACAL,EAAQW,SAASV,EAAMK,EAAIC,EAAGD,EAAIG,EAAIC,EAAWN,GAGjDJ,EAAQY,WAAWX,EAAMK,EAAIC,EAAGD,EAAIG,EAAIC,EAAWN,GCjCpD,IAAMS,EAAa,CAAC,OAAQ,YAAa,OAAQ,kBAC3CC,EAAb,2EACI,SAAKC,IDFF,SAAkBA,GAAM,UACnBf,EAAuCe,EAAvCf,QAASgB,EAA8BD,EAA9BC,SAAUd,EAAoBa,EAApBb,OAAQC,EAAYY,EAAZZ,QAAkBc,EAAYD,EAASE,UAC1E,GAAKD,EAAL,CAGA,IAAME,EAAWF,EAAUG,MAC3B,QAAiBC,IAAbF,EAAJ,MAGsBE,IAAlBL,EAASM,OACTN,EAASM,MAAOC,EAAAA,EAAAA,IAAyBJ,EAAUH,EAASQ,kBAEhE,IAAMF,EAAON,EAASM,KAAMG,EAAK,UAAGR,EAAUQ,aAAb,QAAsB,GAAIC,EAAM,UAAGT,EAAUS,cAAb,QAAuB,MAAOC,EAbpF,EAa2FC,KAAKC,MAAM3B,GAAkB4B,EAAI,UAAGb,EAAUa,YAAb,QAAqB,UAAWzB,EAAOW,EAASe,UACjLC,EAAK,OAAGV,QAAH,IAAGA,OAAH,EAAGA,EAAMW,MAAM,MAC1B,GAAKD,EAAL,CAGAhC,EAAQ8B,KAAR,UAAkBL,EAAlB,YAA2BC,EAA3B,YAAqCC,EAArC,eAAgDG,EAAhD,KACA9B,EAAQkC,YAAc/B,EACtB,IAAK,IAAIgC,EAAI,EAAGA,EAAIH,EAAMxB,OAAQ2B,IAC9BpC,EAASC,EAASgC,EAAMG,GAAIjC,EAAQC,EAASgC,EAAG9B,GAEpDL,EAAQkC,YAAc,KCnBlBE,CAASrB,KAFjB,mDAII,WAAWsB,GAAX,4EACUC,EAAUD,EAAUE,eACtB1B,EAAW2B,MAAK,SAACC,GAAD,OAAOC,EAAAA,EAAAA,IAAUD,EAAGH,EAAQK,UAAUC,MAAMC,SAFpE,uBAGcC,EAAejC,EAChBkC,KAAI,SAACN,GAAD,OAAOH,EAAQK,UAAUC,MAAMN,QAAQG,MAC3CD,MAAK,SAACC,GAAD,QAASA,KAAIO,EAAW,IAClCC,EAAAA,EAAAA,IAA0BH,GAAc,SAACF,GACrCI,EAASE,MAAKC,EAAAA,EAAAA,IAASP,EAAMd,KAAMc,EAAMlB,YAPrD,SASc0B,QAAQC,IAAIL,GAT1B,2CAJJ,iFAgBI,SAAaX,EAAWrB,GACpB,GAAKA,EAAS4B,OAAU/B,EAAWyC,SAAStC,EAAS4B,OAArD,CAGA,IAAM3B,EAAYD,EAASE,UAC3B,QAAkBG,IAAdJ,EAAJ,CAGA,IAAME,EAAWF,EAAUG,WACVC,IAAbF,IAGJH,EAASM,MAAOC,EAAAA,EAAAA,IAAyBJ,EAAUH,EAASQ,wBA5BpE,M,0GCFO,SAAe+B,EAAtB,kC,sCAAO,WAA6BC,GAA7B,4FAAqCC,IAArC,0CAC0B,uCAD1B,uBACK3C,EADL,EACKA,WADL,SAEG0C,EAAOE,SAAS7C,EAAAA,WAAY,IAAIC,EAAc2C,GAFjD,2C","sources":["../node_modules/@tsparticles/shape-text/browser/Utils.js","../node_modules/@tsparticles/shape-text/browser/TextDrawer.js","../node_modules/@tsparticles/shape-text/browser/index.js"],"sourcesContent":["import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n","import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport const validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\nexport class TextDrawer {\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n","import { validTypes } from \"./TextDrawer.js\";\nexport async function loadTextShape(engine, refresh = true) {\n    const { TextDrawer } = await import(\"./TextDrawer.js\");\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\n}\n"],"names":["drawLine","context","line","radius","opacity","index","fill","pos","x","length","y","diameter","fillText","strokeText","validTypes","TextDrawer","data","particle","character","shapeData","textData","value","undefined","text","itemFromSingleOrMultiple","randomIndexData","style","weight","size","Math","round","font","shapeFill","lines","split","globalAlpha","i","drawText","container","options","actualOptions","find","t","isInArray","particles","shape","type","shapeOptions","map","promises","executeOnSingleOrMultiple","push","loadFont","Promise","all","includes","loadTextShape","engine","refresh","addShape"],"sourceRoot":""}